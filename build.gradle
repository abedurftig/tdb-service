buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'org.tdb'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.modelmapper:modelmapper:1.1.0')
    compile('org.apache.maven.surefire:surefire-report-parser:2.20.1')
    compile('org.apache.commons:commons-dbcp2:2.1.1')
    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql:9.4.1212')
    runtime('commons-fileupload:commons-fileupload:1.3.1')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

bootRepackage {
    mainClass = 'org.tdb.Application'
}

springBoot {
    mainClass = 'org.tdb.Application'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

task stage() {
    dependsOn build
}

task cleanArtifacts(type: Delete) {
    delete 'artifacts'
}

task prepareArtifacts(type: Copy) {
    
    file('artifacts/libs').mkdirs()
    file('artifacts/test/results').mkdirs()
    file('artifacts/test/report').mkdirs()

    from('build/libs') {
        include '*.jar' into 'libs'
    }

    from('build/test-results/test') {
        include '*.xml' into 'test/results'
    }

    from('build/reports/tests/test') {
        into 'test/report'
    }

    into 'artifacts/'

}

build.finalizedBy(prepareArtifacts)
clean.finalizedBy(cleanArtifacts)

apply from: 'docker/docker.gradle'
apply from: 'upload/upload.gradle'
apply from: 'swagger/swagger.gradle'
