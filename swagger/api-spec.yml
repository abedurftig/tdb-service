swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Test Dashboard"
  contact:
    email: "dasnervtdoch@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api"
schemes:
- "http"
paths:
  /upload-junit4-xml:
    post:
      tags:
        - Upload
      operationId: uploadJUnit4Xml
      consumes:
        - "multipart/form-data"
      parameters:
      - in: formData
        name: file
        type: file
        required: true
        description: The file to upload.
      - in: formData
        name: externalProjectId
        type: string
        required: true
        description: Parent project.
      - in: formData
        name: externalTestRunId
        type: string
        required: true
        description: Relate single test execution to a test run.
      responses:
        200:
          description: Successful upload
          schema:
            $ref: '#/definitions/UploadSummaryDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /upload-junit4-xml-wrapped:
    post:
      tags:
        - Upload
      operationId: uploadJUnit4XmlWrapped
      consumes:
        - "multipart/form-data"
      parameters:
      - in: formData
        name: file
        type: file
        required: true
        description: The file to upload.
      - in: formData
        name: externalProjectId
        type: string
        required: true
        description: Parent project.
      - in: formData
        name: externalTestRunId
        type: string
        required: true
        description: Relate single test execution to a test run.
      responses:
        200:
          description: Successful upload
          schema:
            $ref: '#/definitions/UploadSummaryDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /account:
    post:
      tags:
        - Account
      summary: Create a new account and user.
      description: Create a new account and a user (as the owner) with the given details. With will further setup defaults like an initial dashboard.
      operationId: createAccount
      parameters:
        - in: body
          name: accountInformation
          description: The name of the account and the owners details.
          schema:
            type: object
            required:
              - accountName
              - email
              - password
            properties:
              accountName:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: The newly created account.
          schema:
            $ref: '#/definitions/AccountDTO'
        403:
          description: Not authorized.
          schema:
            $ref: '#/definitions/ErrorDTO'
        503:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorDTO'
  /account/{accountId}:
    get:
      summary: Account
      description: Get the account specified by the given accountId.
      operationId: getAccount
      parameters:
        - name: accountId
          in: path
          description: Id of requested account.
          required: true
          type: integer
          format: int64
      tags:
        - Account
      responses:
        200:
          description: The requested account
          schema:
            $ref: '#/definitions/AccountDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /account/{accountId}/projects:
    get:
      summary: Account Projects
      description: Get all projects for the account specified by the given accountId.
      operationId: getProjects
      parameters:
        - name: accountId
          in: path
          description: Id of the owning account.
          required: true
          type: integer
          format: int64
      tags:
        - Account
      responses:
        200:
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /account/{accountId}/projects-summary:
    get:
      summary: Account Projects Summary
      description: Get a projection of all projects for the account specified by the given accountId.
      operationId: getProjectsSummary
      parameters:
        - name: accountId
          in: path
          description: Id of the owning account.
          required: true
          type: integer
          format: int64
      tags:
        - Account
      responses:
        200:
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectSummaryDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /project/{projectId}:
    get:
      summary: Get a single project
      description: Get the project specified by the given projectId.
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          description: Id of requested project.
          required: true
          type: integer
          format: int64
      tags:
        - Project
      responses:
        200:
          description: The requested project
          schema:
            $ref: '#/definitions/ProjectDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    delete:
      tags:
        - Project
      summary: Delete a project.
      description: Delete a project.
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          description: The id of the project to delete.
          type: integer
          format: int64
      responses:
        200:
          description: The project was deleted.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /project/{projectId}/testruns-summary:
    get:
      tags:
        - Project
      summary: Get the test-runs summary for a single project in a given time frame.
      description: Get the test-runs summary for the project specified by the given projectId. The result does not contain information about test suites.
      operationId: getProjectTestRuns
      parameters:
        - name: projectId
          in: path
          description: Id of the project for which the test-runs summary is requested.
          required: true
          type: integer
          format: int64
        - name: from
          in: query
          description: The earliest date for which test runs should be included.
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          description: The last date for which test runs should be included.
          required: false
          type: string
          format: date-time
      responses:
        200:
          description: A list of test-run summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/TestRunSummaryDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /project:
    post:
      tags:
        - Project
      summary: Create a new project.
      description: Create a new project.
      operationId: createProject
      parameters:
        - in: body
          name: project
          description: Information request for the request.
          schema:
            $ref: "#/definitions/ProjectDTO"
      responses:
        200:
          description: The newly created project
          schema:
            $ref: '#/definitions/ProjectDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /token-refresh:
    get:
      tags:
        - Token
      operationId: refreshToken
      responses:
        200:
          description: The user authenticated by this token.
          schema:
            $ref: '#/definitions/UserDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /dashboard:
    post:
      tags:
        - Dashboard
      operationId: createDashboard
      parameters:
        - in: body
          name: dashboard
          description: Information about the dashboard to be created.
          schema:
            $ref: "#/definitions/DashboardDTO"
      responses:
        201:
          description: Created a new dashboard.
          schema:
            $ref: '#/definitions/DashboardDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    delete:
      tags:
        - Dashboard
      summary: Delete a dashboard.
      description: Delete a dashboard.
      operationId: deleteDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The id of the dashboard to delete.
          type: integer
          format: int64
      responses:
        200:
          description: The projdashboardect was deleted.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
definitions:
  AccountDTO:
    type: object
    required:
    - accountName
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      owner:
        type: object
        $ref: '#/definitions/UserDTO'
      dashboards:
        type: array
        items:
          $ref: '#/definitions/DashboardDTO'
      dashboardSettings:
        type: object
        $ref: '#/definitions/DashboardSettingsDTO'
  UserDTO:
    type: object
    required:
    - email
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      accountId:
        type: integer
        format: int64
  ProjectDTO:
    type: object
    required:
    - name
    - accountId
    properties:
      id:
        type: integer
        format: int64
      externalId:
        type: string
      name:
        type: string
      accountId:
        type: integer
        format: int64
      testRuns:
        type: array
        items:
          $ref: '#/definitions/TestRunDTO'
  ProjectSummaryDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      externalId:
        type: string
      name:
        type: string
      accountId:
        type: integer
        format: int64
      numTestRuns:
        type: integer
        format: int32
  ErrorDTO:
    type: object
    required:
    - name
    - message
    - code
    properties:
      name:
        type: string
      message:
        type: string
      code:
        type: string
  ResponseDTO:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: string
  UploadRequestDTO:
    type: object
    required:
    - projectId
    - externalTestRunId
    properties:
      projectId:
        type: integer
        format: int64
      externalTestRunId:
        type: integer
        format: int64
  TestRunDTO:
    type: object
    required:
    - projectId
    properties:
      id:
        type: integer
        format: int64
      externalId:
        type: string
      name:
        type: string
      projectId:
        type: integer
        format: int64
      testSuites:
        type: array
        items:
          $ref: '#/definitions/TestSuiteDTO'
  TestRunSummaryDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      externalId:
        type: string
      name:
        type: string
      numTotal:
        type: integer
        format: int32
      numPassed:
        type: integer
        format: int32
      numFailed:
        type: integer
        format: int32
      numSkipped:
        type: integer
        format: int32
      projectId:
        type: integer
        format: int64
      numTestSuites:
        type: integer
        format: int32
  TestSuiteDTO:
    type: object
    required:
    - testRunId
    - packageName
    - name
    properties:
      id:
        type: integer
        format: int64
      testRunId:
        type: integer
        format: int64
      packageName:
        type: string
      name:
        type: string
      testCases:
        type: array
        items:
          $ref: '#/definitions/TestCaseDTO'
  TestCaseDTO:
    type: object
    required:
    - testSuiteId
    - startDate
    - endDate
    - skipped
    - failed
    properties:
      id:
        type: integer
        format: int64
      testSuiteId:
        type: integer
        format: int64
      name:
        type: string
      startDate:
        type: string
        format: date-time
      endDate:
        type: string
        format: date-time
      skipped:
        type: boolean
      failed:
        type: boolean
      message:
        type: string
  UploadSummaryDTO:
    type: object
    properties:
      testRunId:
        type: integer
        format: int64
      numTestSuites:
        type: integer
        format: int32
      message:
        type: string
  DashboardDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      projectIds:
        type: array
        items:
          type: integer
          format: int64
  DashboardSettingsDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      defaultDashboard:
        type: object
        $ref: '#/definitions/DashboardDTO'
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Bearer
security:
  - JWT: [read, write]